(ns zera.core.html)

(defn render-expression-list
  [exprs]
  (join "" (map html exprs)))

(defn fmt-attrs
  [attrs]
  (->> attrs
       (map (fn [kv] (str (name (kv 0)) "=" (kv 1))))
       (join " ")))

(defn tag?
  [x]
  (or (keyword? x) (fn? x)))

; Any -> HTML(String)
(defn html
  {:memoize true}
  [exp]
  (cond
    (nil? exp) ""
    (boolean? exp) (if exp "Yes" "No")
    (or (vector? exp) (list? exp))
      (cond
        (= 0 (count exp)) ""
        (not (tag? (first exp))) (render-expression-list exp)
        :else
          (let [tag (first exp)]
            (if (fn? tag)
              (html (apply tag (rest exp)))
              (if (map? (second exp))
                (str "<" (name tag) " " (fmt-attrs (exp 1)) ">" (render-expression-list (rest (rest exp))) "</" (name tag) ">")
                (str "<" (name tag) ">" (render-expression-list (rest exp)) "</" (name tag) ">")))))
    :else
      (str exp)))

(defn render-to [elem exp]
  (cond
    (.-write elem) (.write elem (html exp))
    (.-innerHTML elem) (.-set! elem innerHTML (html exp))
    (arraylike? elem) (doeach [e (->array elem)] (render-to e exp))
    :else
      (throw (js/Error. (str "Don't know how to render to " (inspect elem))))))

(defn q [pat]
  (if (.-querySelectorAll js.browser/document)
    (.querySelectorAll js.browser/document pat)
    (throw (js/Error. "Querying by selector is not supported in this browser"))))

(comment
(p (html [:a {:href "#"} "test"]))
(p (html [:a {:href "#"} "test"]))

(defn greet
  [attr &children]
  [:div (merge {:class "greeting"} attr) children])

(p (html [greet {:id "my-greeting"} "Hello " "Delon"]))
)
