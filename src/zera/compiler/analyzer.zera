; vim: ft=clojure
(ns zera.compiler.analyzer)

; http://vps124502.vps.ovh.ca/rage/resources/public/

(def member-access? isMethodApplication)
(def class-instantiation? isClassInstantiation)

(def variable? symbol?)

(defn tag-predicate [tag]
  (fn [exp] (= tag (first exp))))

(def quoted? (tag-predicate 'quote))

(def definition? (tag-predicate 'def))

(def if? (tag-predicate 'if))

(def lambda? (tag-predicate 'fn))

(def block? (tag-predicate 'do))

(def assignment? (tag-predicate 'set!))

(def variable-introspection? (tag-predicate 'defined?))

(def thrown-exception? (tag-predicate 'throw))

(def application? list?)

(defn analyze-application [fn &args]
  {:tag :application :fn fn :args args})

(defn analyze-nil
  [x]
  {:tag :nil})

(defn analyze-number
  [x]
  {:op :constant :tag :number :value x})

(defn analyze-boolean
  [x]
  {:op :constant :tag :boolean :value x})

(defn analyze-string
  [x]
  {:op :constant :tag :string :value x})

(defn analyze-keyword
  [x]
  {:op :constant :tag :zera.core.Keyword :ns (namespace x) :name (name x)})

(defn analyze-symbol
  [x]
  {:op :constant :tag :zera.core.Symbol :ns (namespace x) :name (name x)})

(defn analyze-map-entries
  [x]
  [(analyze (x 0)) (analyze (x 1))])

(defn analyze-map
  [x]
  {:op :map :tag :zera.core.IMap :entries (map analyze-map-entries x)})

(defn analyze-vector
  [x]
  {:op :map :tag :zera.core.IVector :elements (map analyze x)})

(defn analyze-set
  [x]
  {:op :set :tag :zera.core.ISet :elements (map analyze x)})

(defn analyze-variable
  [x]
  {:op :variable :tag :any :ns (namespace x) :name (name x)})

(defn analyze-quoted
  [x]
  {:op :quote :tag :any :value (analyze x)})

(defn analyze-definition
  ([nm] (analyze-definition nm nil (hash-map)))
  ([nm value] (analyze-definition nm value (hash-map))
  ([nm value meta] {:op :def :tag :any :name {:tag :variable :ns (namespace nm) :name (name nm)} :value value :meta meta})

(defn analyze-if
  ([pred alt]
   (analyze-if pred alt nil))
  ([pred alt conse]
   {:op :if :tag :any :predicate (analyze pred) :alternate (analyze alt) :consequent (analyze conse)}))

(defn analyze-lambda
  [args]
  (let [x (first args)]
    (cond
      (vector? x) {:op :fn
                   :tag :any
                   :argcount (count x)
                   :arglists (list (analyze-argument-vector x))
                   :bodies (list (map analyze (rest args)))}
      (list? x)
        (let [arglists (map analyze (map first args))
              argcount (argument-count arglists)]
          {:op :fn
           :tag :any
           :argcount argcount
           :arglists arglists
           :bodies (map analyze (map second args))})
        :else
          (throw (js/Error. "the second element of a Lambda expression should be an arguments vector or a list of bodies")))))

(defn argument-count
  [arglists]
  (->> arglists
       (map count)
       sort
       first))

(defn analyze-argument-vector
  [args]
  {:op :argument-vector :tag :zera.core.IVector :entries (map analyze args)})

(defn analyze-thrown-exception
  [expression]
  {:op :throw :tag :any :expression expression})

(defn analyze-member-access
  [obj method args]
  {:op :. :object obj :member method :args args})

(defn analyze-class-instantiation
  [class args]
  {:op :new :tag :any :class class :args args})

(defn analyze-application
  [fn args]
  {:op :application :tag :any :invocant fn :args args})

(defn analyze [exp]
  (let [exp_ (macroexpand exp)]
    (cond (nil? exp) (analyze-nil exp)
          (number? exp) (analyze-number exp)
          (boolean? exp) (analyze-boolean exp)
          (string? exp) (analyze-string exp)
          (date? exp) (analyze-date exp)
          (regexp? exp) (analyze-regexp exp)
          (keyword? exp) (analyze-keyword exp)
          (map? exp) (analyze-map exp)
          (vector? exp) (analyze-vector exp)
          (set? exp) (analyze-set exp)
          (variable? exp) (analyze-variable exp)
          (quoted? exp) (apply analyze-quoted (rest exp))
          (definition? exp) (apply analyze-definition (rest exp))
          (if? exp) (apply analyze-if (rest exp))
          (lambda? exp) (analyze-lambda (rest exp))
          (assignment? exp) (apply analyze-assignment (rest exp))
          (thrown-exception? exp) (apply analyze-thrown-exception (rest exp))
          (member-access? exp) (apply analyze-member-access (rest exp))
          (class-instantiation? exp) (apply analyze-class-instantiation (rest exp))
          (application? exp) (apply analyze-application exp)
          :else 
            (do
              (println exp)
              (throw (str "analyze: invalid form: '" exp "'"))))))
