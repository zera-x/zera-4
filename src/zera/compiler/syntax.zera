; vim: ft=clojure
(ns zera.compiler.syntax)

(defprotocol Syntax
  (toJS [self]))

;(define-function syntax?
;  [x]
;  (isa? x Syntax))

(defprotocol Literal Syntax)

;(define-function literal?
;  [x]
;  (isa? x Literal))

(defprotocol Atomic Literal)

;(define-function atomic?
;  [x]
;  (isa? x Atomic))

(deftype Nil
  []
  Atomic
  (toJS [self] "null"))

;(define-function nil?
;  [x]
;  (isa? x Nil))

(deftype Boolean
  [value]
  Atomic
  (toJS [self] (if (.-value self) "true" "false")))

;(define-function boolean?
;  [x]
;  (isa? x Boolean))

(defprotocol Numeric)

;(define-function numeric?
;  [x]
;  (isa? x Numeric))

(deftype Number
  [value]
  Atomic
  Numeric
  (toJS [self] (str (.-value self))))

;(define-function number?
;  [x]
;  (isa? x Number))

(deftype String
  [value]
  Atomic
  (toJS [self] (str "'" (.-value self) "'")))

(defprotocol Symbolic)

;(define-function symbolic?
;  [x]
;  (isa? x Symbolic))

(deftype Keyword
  [ns name]
  Atomic
  Symbolic
  (toJS [self]
    (let [ns (.-ns self)]
      (str "zera.core.keyword("
           (if ns (str "\"" ns "\"") "null")
           ", "
           (str "\"" (.-name self)) "\")"))))


;(define-function keyword?
;  [x]
;  (isa? x Keyword))

(deftype Symbol
  [ns name]
  Atomic
  Symbolic
  (toJS [self]
    (let [ns (.-ns self)]
      (if ns
        (str ns "." (.-name self))
        (.-name self)))))

;(define-function symbol?
;  [x]
;  (isa? x Symbol))

(deftype Instant
  [value]
  Atomic
  (toJS [self]
    (str "(new Date(" (.valueOf (.-value self)) "))")))

;(define instant? (lambda [x] (isa? x Instant)))

(deftype Regex
  [value]
  Atomic
  (toJS [self]
    (let [regex (.-value self)]
      (str "(new RegExp(\"" (.-source regex) "\", \"" (.-flags regex) "\"))"))))

;(define regexp?
;  (lambda
;    [x]
;    (isa? x RegExp)))

(defprotocol Collection Literal)

;(define-function collection?
;  [x]
;  (isa? x Collection))

(deftype List
  [value]
  Collection)

;(define-function list?
;  [x]
;  (isa? x List))

(deftype Map
  [value]
  Collection
  (toJS [self]
    (let [coll (.-value self)]
      (if (empty? coll)
        "zera.core.hashMap()"
        (str "zera.core.hashMap("
          (->> (.-value self)
               (map (lambda [x] (str (.toJS (x 0)) ", " (.toJS (x 1)))))
               (join ", ")) ")")))))

;(define-function map?
;  [x]
;  (isa? x Map))

(deftype Vector
  [value]
  Collection
  (toJS [self]
    (let [coll (.-value self)]
      (if (empty? coll)
        "zera.core.vector()"
        (str "zera.core.vector("
          (join ", " (map (& (.toJS %)) (.-value self))) ")")))))

;(define-function vector?
;  [x]
;  (isa? x Vector))

(deftype Set
  [value]
  Collection
  (toJS [self]
    (let [coll (.-value self)]
      (if (empty? coll)
        "zera.core.set()"
        (str "zera.core.set(["
          (->> (.-value self)
               (map (lambda [x] (.toJS x)))
               (join ", ")) "])")))))

;(define-function set?
;  [x]
;  (isa? x Set))

(deftype Variable
  [ns name]
  Syntax
  (toJS [self]
    (let [ns (.-ns self), name (.-name self)]
      (if ns
        (str (.-ns self) "." (.-name self))
        (.-name self)))))

;(define-function variable?
;  [x]
;  (isa? x Variable))

(deftype QuotedValue
  [value]
  Syntax
  (toJS
    [self]
    (.toJS (.-value self))))

;(define-function quoted-value?
;  [x]
;  (isa? x QuotedValue))

(deftype Definition
  [variable value meta]
  Syntax
  (toJS [self]
    (let [variable (.-variable self)
          ns (.-ns variable)
          name (.-name variable)]
      (if ns
        (str (.toJS variable) " = " (.toJS (.-value self)))
        (str "var " (.toJS variable) " = " (.toJS (.-value self)))))))

;(define-function definition?
;  [x]
;  (isa? x Definition))

(deftype If
  [predicate alternate consequent]
  Syntax
  (toJS
    [self]
    (if (.-consequent self)
      (str "(" (.toJS (.-predicate self)) ")?(" (.toJS (.-alternate self)) "):(" (.toJS (.-consequent self)) ")")
      (str "(" (.toJS (.-predicate self)) ")?(" (.toJS (.-alternate self)) "):null"))))

;(define-function conditional?
;  [x]
;  (isa? x Conditional))

(deftype Lambda
  [argcount arglists bodies]
  Syntax
  (toJS [self] (lambda->js (.-argcount self) (.-arglists self) (.-bodies self))))

(deftype ArgumentVector
  [value]
  (toJS [self]
    (str "(" (join ", " (map (& (.toJS %)) (.-value self))) ")")))

(define-function lambda-bodies->js
  [x]
  (let [args (x 0), body (x 1)]
    (str (.toJS args) " " (map (& (.toJS %)) body))))

(define-function lambda->js
  [argcount arglists bodies]
  (if (= 1 (count arglists))
    (let [stmts (map (& (.toJS %)) (first bodies))
          rest (take (- (count stmts) 1) stmts)
          last (drop (- (count stmts)) stmts)]
      (str "(function() {\n"
           "  if (arguments.length === " argcount ") {\n"
              (if (empty? rest)
                ""
                (str "    " (join ";" rest) ";\n"))
           "    return " (first last) ";\n" 
           "  }\n"
           "  else {\n"
           "    throw new Error(['wrong number of arguments, expected: " argcount " got: ', arguments.length].join(''));\n"
           "  }\n"
           "})"))
    (let [fns (zipmap arglists bodies)]
      (str "(function(){"
           (join " " (map lambda-bodies->js fns)) "})"))))

;(define-function lambda?
;  [x]
;  (isa? x Lambda))

(deftype Block
  [expressions]
  Syntax)

;(define-function block?
;  [x]
;  (isa? x Block))

(deftype TryBlock
  [body catchClause finallyClause]
  Syntax)

;(define-function try-block?
;  [x]
;  (isa? x TryBlock))

(deftype CatchClause
  [bindings body]
  Syntax)

;(define-function catch-clause?
;  [x]
;  (isa? x CatchClause))

(deftype FinallyClause
  [body]
  Syntax)

;(define-function finally-clause?
;  [x]
;  (isa? x FinallyClause))

(deftype Loop
  [bindings body]
  Syntax)

;(define-function loop?
;  [x]
;  (isa? x Loop))

(deftype RecursionPoint
  [args]
  Syntax)

;(define-function recursion-point?
;  [x]
;  (isa? x RecursionPoint))

(deftype Assignment
  [obj value]
  Syntax)

;(define-function assignment?
;  [x]
;  (isa? x Assignment))

(deftype ProtocolDefinition
  [name specs meta]
  Syntax)

;(define-function protocol-definition?
;  [x]
;  (isa? x ProtocolDefinition))

(deftype TypeDefinition
  [name bindings specs meta]
  Syntax)

;(define-function type-definition?
;  [x]
;  (isa? x TypeDefinition))

(deftype MacroDefinition
  [name bindings body meta]
  Syntax)

;(define-function macro-definiation?
;  [x]
;  (isa? x MacroDefinition))

(deftype ThrownException
  [expression]
  Syntax)

;(define-function thrown-exception?
;  [x]
;  (isa? x ThrownException))

(deftype PropertyAccessor
  [obj property]
  Syntax)

;(define-function property-accessor?
;  [x]
;  (isa? x PropertyAccessor))

(deftype PropertyAssignment
  [obj property value]
  Syntax)

;(define-function property-assignment?
;  [x]
;  (isa? x PropertyAssignment))

(deftype MethodApplication
  [obj method args]
  Syntax)

;(define-function method-application?
;  [x]
;  (isa? x MethodApplication))

(deftype ClassInstantiation
  [class args]
  Syntax)

;(define-function class-instantiation?
;  [x]
;  (isa? x ClassInstantiation))

(deftype ModuleDefinition
  [name]
  Syntax)

;(define-function method-definition?
;  [x]
;  (isa? x MethodDefinition))

(deftype ModuleRequire
  [name]
  Syntax)

;(define-function module-require?
;  [x]
;  (isa? x ModuleRequire))

(deftype ModuleSet
  [name]
  Syntax)

;(define-function module-set?
;  [x]
;  (isa? x ModuleSet))

(deftype Application
  [fn args]
  Syntax)

;(define-function application?
;  [x]
;  (isa? x Application))
