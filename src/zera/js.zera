(ns js)

(defn object
  [&pairs]
  (let [o (.create js/Object js/null)
        xs (partition 2 pairs)]
    (doeach [x xs]
      (let [k (first x)]
        (.-set! o (if (keyword? k) (name k) (str k)) (second x))))
    o))

; TODO: build with js/function and js/object
(defn create-type [attrs &specs])
(defn create-protocol [attrs &specs])

(defn encode-json
  [x]
  (.stringify js/JSON x))

(defn decode-json
  [json-string]
  (.parse js/JSON json-string))

(defmacro promise
  [binds &forms]
  (cons 'Promise. (cons 'lambda (cons binds forms))))

(defmacro >>
  [x &forms]
  (cons '..
    (cons x
          (map
            (lambda [form] (list 'then (list 'lambda '[x] (list form 'x))))
            forms))))

(defn fulfilled?
  [x]
  (.? x isFulfilled))

(defn rejected?
  [x]
  (.? x isRejected))

(defn pending?
  [x]
  (.? x isPending))

(defn canceled?
  [x]
  (.? x isCanceled?))

(browser?
  (defn http-get
    [url]
    (promise [success failure]
      (doto (js/XMLHttpRequest.)
        (.addEventListener "error" failure)
        (.addEventListener "load" success)
        (.open "GET" url)
        (.send nil)))))

